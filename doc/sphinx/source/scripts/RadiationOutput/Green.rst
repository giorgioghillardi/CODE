.. _module-ro-green:

(green)
*******
The type of output generated by this module is known by many names: *Green's
functions*, *weight functions* and *response functions*, to name just a few.
We will henceforth use the former, *Green's function*.

Mathematically, the Green's function is defined as the function which, when
integrated over phase space with the distribution function yields the detected
radiation:

.. math::
   :label: greendef

   I = \iiint G(\rho, p_\parallel, p_\perp) f(\rho, p_\parallel, p_\perp)\, p_\perp\, \mathrm{d}\rho\mathrm{d}p_\parallel\mathrm{d}p_\perp,

where :math:`G` denotes the Green's function, :math:`f` the distribution
function, and the lone factor of :math:`p_\perp` at the end of the integrand
is the momentum space Jacobian. More explicit expressions for :math:`G` can be
obtained from the synthetic radiation diagnostic integral (see the discussion
on :ref:`module-radiation`), but for the sake of keeping the discussion we
brief we will not give those details here.

An alternative definition of the Green's function employed by some is to move
the guiding-center Jacobian out of :math:`G`, so that
:math:`G = J\tilde{G}` and :eq:`greendef` instead reads

.. math::

   I = \iiint \tilde{G}(\rho, p_\parallel, p_\perp) f(\rho, p_\parallel, p_\perp)\, J\, p_\perp\, \mathrm{d}\rho\mathrm{d}p_\parallel\mathrm{d}p_\perp,

:math:`J` is the Jacobian for the guiding-center transformation.

This output module allows you to consider many different types of Green's
functions, which may be integrated over any or all of phase space, the image
pixels and/or the detector spectral range. It thus provides everything needed
to analyse the phase space dependence of detected radiation, or attempt to solve
an inverse problem.

Summary of options
------------------

+-------------------------------------------------+---------------------------------------------+
| **Option**                                      | **Description**                             |
+-------------------------------------------------+---------------------------------------------+
| :option:`@RadiationOutput(green) format`        | Green's function format (i.e. dependences). |
+-------------------------------------------------+---------------------------------------------+
| :option:`@RadiationOutput(green) output`        | Name of output file.                        |
+-------------------------------------------------+---------------------------------------------+
| :option:`@RadiationOutput(green) pixels`        | Number of pixels.                           |
+-------------------------------------------------+---------------------------------------------+
| :option:`@RadiationOutput(green) stokesparams`  | Whether or not to store Stokes parameters.  |
+-------------------------------------------------+---------------------------------------------+
| :option:`@RadiationOutput(green) suboffseti`    | Sub-image offset in vertical direction.     |
+-------------------------------------------------+---------------------------------------------+
| :option:`@RadiationOutput(green) suboffsetj`    | Sub-image offset in horizontal direction.   |
+-------------------------------------------------+---------------------------------------------+
| :option:`@RadiationOutput(green) subpixels`     | Number of pixels in sub-image.              |
+-------------------------------------------------+---------------------------------------------+
| :option:`@RadiationOutput(green) with_f`        | Multiply with the distribution function.    |
+-------------------------------------------------+---------------------------------------------+
| :option:`@RadiationOutput(green) with_jacobian` | Multiply with the guiding-center Jacobian.  |
+-------------------------------------------------+---------------------------------------------+

Example configuration
---------------------
The following example generates a Green's function with one radial dimension and
two pixel dimensions, allowing various radial density profiles to be applied
after the simulation to generate the corresponding radiation images::

   @RadiationOutput ourOutput (green) {
       format = "rij";
       output = "/path/to/output.mat";
       pixels = 300 300;
   }

Output file structure
---------------------
The output file always contains the following variables:

+-----------------+----------------------------------------------------------------------------------------------------------------+
| **Option**      | **Description**                                                                                                |
+-----------------+----------------------------------------------------------------------------------------------------------------+
| ``func``        | Array containing the Green's function.                                                                         |
+-----------------+----------------------------------------------------------------------------------------------------------------+
| ``param1``      | First momentum parameter grid.                                                                                 |
+-----------------+----------------------------------------------------------------------------------------------------------------+
| ``param2``      | Second momentum parameter grid.                                                                                |
+-----------------+----------------------------------------------------------------------------------------------------------------+
| ``param1name``  | SOFT name of first momentum parameter.                                                                         |
+-----------------+----------------------------------------------------------------------------------------------------------------+
| ``param2name``  | SOFT name of second momentum parameter.                                                                        |
+-----------------+----------------------------------------------------------------------------------------------------------------+
| ``r``           | Radial grid.                                                                                                   |
+-----------------+----------------------------------------------------------------------------------------------------------------+
| ``type``        | Green's function format string.                                                                                |
+-----------------+----------------------------------------------------------------------------------------------------------------+
| ``wavelengths`` | Spectrum grid (wavelength for synchrotron, photon energy normalized to electron rest mass for bremsstrahlung). |
+-----------------+----------------------------------------------------------------------------------------------------------------+

Subset images
-------------
Green's functions can become very large if pixel information is desired. To
reduce the amount of unnecessary information stored, it is possible to only
store a certain part of a camera image, i.e. a subset image.

.. image:: ../../_static/figs/subimage.svg
   :align: center

The subset image is defined by three parameters:

- Offset in the vertical direction (:option:`@RadiationOutput(green) suboffseti`)
- Offset in the horizontal direction (:option:`@RadiationOutput(green) suboffsetj`)
- Number of pixels of subset image (:option:`@RadiationOutput(green) subpixels`).

In the illustration above, these parameters are ``suboffseti = 3``,
``suboffsetj = 4`` and ``subpixels = 3``.

.. note::

   The sums ``suboffseti + subpixels(i)`` and ``suboffsetj + subpixels(j)`` must
   both be less than or equal to the value assigned to*
   :option:`@RadiationOutput(green) pixels`.

All options
-----------

.. program:: @RadiationOutput(green)

.. option:: format

   :Default value: Nothing
   :Allowed values: Any combination of ``1``, ``2``, ``i``, ``j``, ``r`` and ``w``.

   Specifies the format of the Green's function, i.e. which parameters the
   function should depend on and in which order the dependences should be
   placed. The format is a string consisting of any number of the characters in
   the table below, in any order.

   For example, if :option:`@RadiationOutput(green) format` is set to ``r12``,
   the Green's function :math:`G(\rho, p_1, p_2)` will be generated, where
   :math:`p_1` and :math:`p_2` denote the momentum space parameters used for the
   simulation (specified in the :ref:`module-particlegenerator` module; the
   momentum parameters are ordered alphabetically, so that :math:`p_1` is the
   momentum parameter which's name comes first alphabetically). The function
   :math:`G(\rho, p_1, p_2)` will be represented as a 3-dimensional array with
   the :math:`\rho` dependence along the first dimension, :math:`p_1` dependence
   along the second dimension, and :math:`p_2` along the third.

   +------------+---------------------------------------------+
   | **Format** | **Description**                             |
   +------------+---------------------------------------------+
   | ``1``      | (Alphabetically) first momentum parameter.  |
   +------------+---------------------------------------------+
   | ``2``      | (Alphabetically) second momentum parameter. |
   +------------+---------------------------------------------+
   | ``i``      | Vertical pixel dimension.                   |
   +------------+---------------------------------------------+
   | ``j``      | Horizontal pixel dimension.                 |
   +------------+---------------------------------------------+
   | ``r``      | Radial parameter.                           |
   +------------+---------------------------------------------+
   | ``w``      | Radiation spectrum.                         |
   +------------+---------------------------------------------+

.. note::

   For pixels, both ``i`` and ``j`` must specified; they may be
   specified in any order though.

.. option:: output

   :Default value: Nothing
   :Allowed values: Any valid file name.

   Name of the output file in which to store the result.

.. option:: pixels
   
   :Default value: 0
   :Allowed values: Any positive integer.

   Number of pixels in image (if ``i`` and ``j`` are part of the format string).
   If only one value is specified, the image becomes quadratic with the same
   number of pixels in both the vertical and horizontal directions. If two
   values are given, the first value is interpreted as the number of pixels in
   the vertical direction and second value as the number of pixels in the
   horizontal direction.

.. option:: stokesparams

   :Default value: ``no``
   :Allowed values: ``yes`` or ``no``.

   If ``yes``, adds information about the Stokes parameter :math:`(I, Q, U, V)`
   to the Green's function. Another dimension is added to the output array, and
   becomes the new first dimension. This effectively means that instead of
   storing one Green's function, four separate Green's function corresponding to
   each of the Stokes parameters is stored contiguously in memory.

.. option:: suboffseti

.. option:: suboffsetj

   :Default value: 0
   :Allowed values: Any non-negative integer.

   Specifies the vertical and horizontal offset, respectively, of the subset
   image.

.. option:: subpixels

   :Default value: Same as :option:`@RadiationOutput(green) pixels`
   :Allowed values: Any positive integer.

   Specifies the number of pixels of the subset image. If only one value is
   specified, the subset image becomes quadratic with the same number of pixels
   in both the vertical and horizontal directions. If two values are given, the
   first value is interpreted as the number of pixels in the vertical direction
   and the second value as the number of pixels in the horizontal direction.

.. option:: with_f

   :Default value: ``no``
   :Allowed values: ``yes`` or ``no``.

   If ``yes``, multiplies the Green's function with the distribution function.
   This allows the ``(green)`` module to produce proper radiation quantities,
   such as camera images or :ref:`dominant-particles`.

.. note::

   If this option is enabled, the momentum space Jacobian will still
   NOT be multiplied with the result, and must be applied manually.

.. option:: with_jacobian

   :Default value: ``yes``
   :Allowed values: ``yes`` or ``no``

   If ``yes``, includes the guiding-center in the definition of the Green's
   function (i.e. generates :math:`G`, as defined at the top of this page).

