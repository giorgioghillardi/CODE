#!/usr/bin/env python3
#
# A script for generating a table of correct
# values for the cone model using SOFTv1.

import numpy as np
import subprocess
import io, os, sys
import glob

# Number of test cases
N = 1000
PRECISION = 16

m = 9.10938356e-31
c = 299792458.0
mc = m*c

try:
    SOFTPATH = os.environ['SOFTPATH']
except:
    print('ERROR: No SOFTPATH variable set. Unable to located SOFTv1.')
    sys.exit(-1)

pifiles = glob.glob('pi*')
NPIFILES = len(pifiles)

for i in range(0,NPIFILES):
    print('Running SOFTv1 ('+str(i+1)+'/'+str(NPIFILES)+')...')

    # Load detector setup
    pilines = []
    direction = []
    position = []
    visang = 0.0
    aperture = 0.0

    with open('pi'+str(i), 'r') as f:
        pilines = f.readlines()

    for j in range(0, len(pilines)):
        ln = pilines[j].strip()
        if ln.startswith('direction'):
            parts = ln.split('=')
            direction = parts[1].split(',')
            direction = [float(x.strip()) for x in direction]
        elif ln.startswith('position'):
            parts = ln.split('=')
            position = parts[1].split(',')
            position = [float(x.strip()) for x in position]
        elif ln.startswith('vision_angle'):
            parts = ln.split('=')
            visang = float(parts[1].strip()) * 0.5
        elif ln.startswith('aperture'):
            parts = ln.split('=')
            aperture = float(parts[1].strip())

    p = subprocess.Popen([SOFTPATH+'/soft', 'pi'+str(i)], stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    stderr_data = p.communicate()[1].decode('utf-8')

    if p.returncode is not 0:
        raise RuntimeError('SOFT returned with a non-zero exit code ('+str(p.returncode)+'). '+stderr_data)

    c = io.StringIO(stderr_data)
    print('Done.')
    print('Parsing output...')
    CSV = np.loadtxt(c, delimiter=',')

    step = int(len(CSV) / N)

    print('Generating benchmark table...')
    s  = "/* This file was auto-generated by 'gentables.py'. Do not edit manually. */\n"
    s += "#include \"Test_ConeProjection.h\"\n\n"

    s += "const slibreal_t Test_ConeProjection_detdir"+str(i)+"[3] = {%.16e,%.16e,%.16e};\n" % (direction[0], direction[1], direction[2])
    s += "const slibreal_t Test_ConeProjection_detpos"+str(i)+"[3] = {%.16e,%.16e,%.16e};\n" % (position[0], position[1], position[2])
    s += "const slibreal_t Test_ConeProjection_visang"+str(i)+"    = %.16e;\n" % visang
    s += "const slibreal_t Test_ConeProjection_aperture"+str(i)+"    = %.16e;\n" % aperture
    s += "const unsigned int Test_ConeProjection_nconespec"+str(i)+" = "+str(N)+";\n"
    s += "const struct conemodel_spec Test_ConeProjection_conespec"+str(i)+"[Test_ConeProjection_nconespec"+str(i)+"] = {\n"

    for j in range(0, N):
        X = CSV[j][0:3]
        V = CSV[j][3:6]
        ppar = CSV[j][6] / mc
        pperp = CSV[j][7] / mc
        fraction = CSV[j][8]

        s += "    {"
        s += "{"+str(X[0])+","+str(X[1])+","+str(X[2])+"},"
        s += "{"+str(V[0])+","+str(V[1])+","+str(V[2])+"},"
        s += "{1:,.{0}f},".format(PRECISION,ppar)
        s += "{1:,.{0}f},".format(PRECISION,pperp)
        s += "{1:,.{0}f}".format(PRECISION,fraction)

        if j < N-1:
            s += "},\n"
        else:
            s += "}\n"

    s += "};"

    with open('Test_ConeProjection_tbl'+str(i)+'.cpp', 'w') as f:
        f.write(s)

# Generate interface
s1 = "/* This file was auto-generated by 'gentables.py'. Do not edit manually. */\n\n"
s2 = "\nconst unsigned int Test_ConeProjection::nconespec = "+str(NPIFILES)+";\n"
s2 +="const struct conemodel_spec *Test_ConeProjection::conespec[Test_ConeProjection::nconespec] = {\n"

s3 = "const unsigned int Test_ConeProjection::conespec_N[Test_ConeProjection::nconespec] = {\n"
s4 = "const slibreal_t *Test_ConeProjection::detdir[Test_ConeProjection::nconespec] = {\n"
s5 = "const slibreal_t *Test_ConeProjection::detpos[Test_ConeProjection::nconespec] = {\n"
s6 = "const slibreal_t Test_ConeProjection::visang[Test_ConeProjection::nconespec] = {\n"
s7 = "const slibreal_t Test_ConeProjection::aperture[Test_ConeProjection::nconespec] = {\n"

for i in range(0, NPIFILES):
    s1 += "#include \"Test_ConeProjection_tbl"+str(i)+".cpp\"\n"
    s2 += "    Test_ConeProjection_conespec"+str(i)
    s3 += "    Test_ConeProjection_nconespec"+str(i)
    s4 += "    Test_ConeProjection_detdir"+str(i)
    s5 += "    Test_ConeProjection_detpos"+str(i)
    s6 += "    Test_ConeProjection_visang"+str(i)
    s7 += "    Test_ConeProjection_aperture"+str(i)

    if i < NPIFILES-1:
        s2 += ","
        s3 += ","
        s4 += ","
        s5 += ","
        s6 += ","
        s7 += ","

    s2 += "\n"
    s3 += "\n"
    s4 += "\n"
    s5 += "\n"
    s6 += "\n"
    s7 += "\n"

s2 += "};\n"
s3 += "};\n"
s4 += "};\n"
s5 += "};\n"
s6 += "};\n"
s7 += "};\n"

s = s1 + s2 + s3 + s4 + s5 + s6 + s7

with open('Test_ConeProjection_tbls.cpp', 'w') as f:
    f.write(s)

